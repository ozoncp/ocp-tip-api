// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-tip-api/ocp-tip-api.proto

package ocp_tip_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateTipV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTipV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return CreateTipV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetProblemId() <= 0 {
		return CreateTipV1RequestValidationError{
			field:  "ProblemId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Text

	return nil
}

// CreateTipV1RequestValidationError is the validation error returned by
// CreateTipV1Request.Validate if the designated constraints aren't met.
type CreateTipV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTipV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTipV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTipV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTipV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTipV1RequestValidationError) ErrorName() string {
	return "CreateTipV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTipV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTipV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTipV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTipV1RequestValidationError{}

// Validate checks the field values on CreateTipV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTipV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateTipV1ResponseValidationError is the validation error returned by
// CreateTipV1Response.Validate if the designated constraints aren't met.
type CreateTipV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTipV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTipV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTipV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTipV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTipV1ResponseValidationError) ErrorName() string {
	return "CreateTipV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTipV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTipV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTipV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTipV1ResponseValidationError{}

// Validate checks the field values on MultiCreateTipV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateTipV1Request) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTips() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateTipV1RequestValidationError{
					field:  fmt.Sprintf("Tips[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateTipV1RequestValidationError is the validation error returned by
// MultiCreateTipV1Request.Validate if the designated constraints aren't met.
type MultiCreateTipV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateTipV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateTipV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateTipV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateTipV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateTipV1RequestValidationError) ErrorName() string {
	return "MultiCreateTipV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateTipV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateTipV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateTipV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateTipV1RequestValidationError{}

// Validate checks the field values on MultiCreateFailedTipV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateFailedTipV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for ProblemId

	// no validation rules for Text

	return nil
}

// MultiCreateFailedTipV1ValidationError is the validation error returned by
// MultiCreateFailedTipV1.Validate if the designated constraints aren't met.
type MultiCreateFailedTipV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateFailedTipV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateFailedTipV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateFailedTipV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateFailedTipV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateFailedTipV1ValidationError) ErrorName() string {
	return "MultiCreateFailedTipV1ValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateFailedTipV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateFailedTipV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateFailedTipV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateFailedTipV1ValidationError{}

// Validate checks the field values on MultiCreateTipV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateTipV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetNotCreatedTips() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateTipV1ResponseValidationError{
					field:  fmt.Sprintf("NotCreatedTips[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateTipV1ResponseValidationError is the validation error returned by
// MultiCreateTipV1Response.Validate if the designated constraints aren't met.
type MultiCreateTipV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateTipV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateTipV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateTipV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateTipV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateTipV1ResponseValidationError) ErrorName() string {
	return "MultiCreateTipV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateTipV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateTipV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateTipV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateTipV1ResponseValidationError{}

// Validate checks the field values on UpdateTipV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTipV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return UpdateTipV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if m.GetUserId() <= 0 {
		return UpdateTipV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetProblemId() <= 0 {
		return UpdateTipV1RequestValidationError{
			field:  "ProblemId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Text

	return nil
}

// UpdateTipV1RequestValidationError is the validation error returned by
// UpdateTipV1Request.Validate if the designated constraints aren't met.
type UpdateTipV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTipV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTipV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTipV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTipV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTipV1RequestValidationError) ErrorName() string {
	return "UpdateTipV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTipV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTipV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTipV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTipV1RequestValidationError{}

// Validate checks the field values on UpdateTipV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTipV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateTipV1ResponseValidationError is the validation error returned by
// UpdateTipV1Response.Validate if the designated constraints aren't met.
type UpdateTipV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTipV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTipV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTipV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTipV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTipV1ResponseValidationError) ErrorName() string {
	return "UpdateTipV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTipV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTipV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTipV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTipV1ResponseValidationError{}

// Validate checks the field values on DescribeTipV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeTipV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return DescribeTipV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeTipV1RequestValidationError is the validation error returned by
// DescribeTipV1Request.Validate if the designated constraints aren't met.
type DescribeTipV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTipV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTipV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTipV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTipV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTipV1RequestValidationError) ErrorName() string {
	return "DescribeTipV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTipV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTipV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTipV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTipV1RequestValidationError{}

// Validate checks the field values on DescribeTipV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeTipV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTip()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeTipV1ResponseValidationError{
				field:  "Tip",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeTipV1ResponseValidationError is the validation error returned by
// DescribeTipV1Response.Validate if the designated constraints aren't met.
type DescribeTipV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTipV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTipV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTipV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTipV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTipV1ResponseValidationError) ErrorName() string {
	return "DescribeTipV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTipV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTipV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTipV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTipV1ResponseValidationError{}

// Validate checks the field values on ListTipsV1Request with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListTipsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLimit() <= 0 {
		return ListTipsV1RequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Offset

	// no validation rules for SearchQuery

	return nil
}

// ListTipsV1RequestValidationError is the validation error returned by
// ListTipsV1Request.Validate if the designated constraints aren't met.
type ListTipsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTipsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTipsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTipsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTipsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTipsV1RequestValidationError) ErrorName() string {
	return "ListTipsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTipsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTipsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTipsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTipsV1RequestValidationError{}

// Validate checks the field values on ListTipsV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTipsV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTips() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTipsV1ResponseValidationError{
					field:  fmt.Sprintf("Tips[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListTipsV1ResponseValidationError is the validation error returned by
// ListTipsV1Response.Validate if the designated constraints aren't met.
type ListTipsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTipsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTipsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTipsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTipsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTipsV1ResponseValidationError) ErrorName() string {
	return "ListTipsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTipsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTipsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTipsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTipsV1ResponseValidationError{}

// Validate checks the field values on RemoveTipV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveTipV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return RemoveTipV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveTipV1RequestValidationError is the validation error returned by
// RemoveTipV1Request.Validate if the designated constraints aren't met.
type RemoveTipV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTipV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTipV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTipV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTipV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTipV1RequestValidationError) ErrorName() string {
	return "RemoveTipV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTipV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTipV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTipV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTipV1RequestValidationError{}

// Validate checks the field values on RemoveTipV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveTipV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// RemoveTipV1ResponseValidationError is the validation error returned by
// RemoveTipV1Response.Validate if the designated constraints aren't met.
type RemoveTipV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTipV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTipV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTipV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTipV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTipV1ResponseValidationError) ErrorName() string {
	return "RemoveTipV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTipV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTipV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTipV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTipV1ResponseValidationError{}

// Validate checks the field values on TipV1 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TipV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for ProblemId

	// no validation rules for Text

	return nil
}

// TipV1ValidationError is the validation error returned by TipV1.Validate if
// the designated constraints aren't met.
type TipV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TipV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TipV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TipV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TipV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TipV1ValidationError) ErrorName() string { return "TipV1ValidationError" }

// Error satisfies the builtin error interface
func (e TipV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTipV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TipV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TipV1ValidationError{}
