// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_tip_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpTipApiClient is the client API for OcpTipApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpTipApiClient interface {
	// Создает новый совет
	CreateTipV1(ctx context.Context, in *CreateTipV1Request, opts ...grpc.CallOption) (*CreateTipV1Response, error)
	// Создает множество советов
	MultiCreateTipV1(ctx context.Context, in *MultiCreateTipV1Request, opts ...grpc.CallOption) (*MultiCreateTipV1Response, error)
	// Обновляет совет
	UpdateTipV1(ctx context.Context, in *UpdateTipV1Request, opts ...grpc.CallOption) (*UpdateTipV1Response, error)
	// Возвращает описание совета
	DescribeTipV1(ctx context.Context, in *DescribeTipV1Request, opts ...grpc.CallOption) (*DescribeTipV1Response, error)
	// Возвращает список советов
	ListTipsV1(ctx context.Context, in *ListTipsV1Request, opts ...grpc.CallOption) (*ListTipsV1Response, error)
	// Удаляет совет
	RemoveTipV1(ctx context.Context, in *RemoveTipV1Request, opts ...grpc.CallOption) (*RemoveTipV1Response, error)
	// Служебная информация о сервисе
	ServiceInfoV1(ctx context.Context, in *ServiceInfoV1Request, opts ...grpc.CallOption) (*ServiceInfoV1Response, error)
}

type ocpTipApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpTipApiClient(cc grpc.ClientConnInterface) OcpTipApiClient {
	return &ocpTipApiClient{cc}
}

func (c *ocpTipApiClient) CreateTipV1(ctx context.Context, in *CreateTipV1Request, opts ...grpc.CallOption) (*CreateTipV1Response, error) {
	out := new(CreateTipV1Response)
	err := c.cc.Invoke(ctx, "/ocp.tip.api.OcpTipApi/CreateTipV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTipApiClient) MultiCreateTipV1(ctx context.Context, in *MultiCreateTipV1Request, opts ...grpc.CallOption) (*MultiCreateTipV1Response, error) {
	out := new(MultiCreateTipV1Response)
	err := c.cc.Invoke(ctx, "/ocp.tip.api.OcpTipApi/MultiCreateTipV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTipApiClient) UpdateTipV1(ctx context.Context, in *UpdateTipV1Request, opts ...grpc.CallOption) (*UpdateTipV1Response, error) {
	out := new(UpdateTipV1Response)
	err := c.cc.Invoke(ctx, "/ocp.tip.api.OcpTipApi/UpdateTipV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTipApiClient) DescribeTipV1(ctx context.Context, in *DescribeTipV1Request, opts ...grpc.CallOption) (*DescribeTipV1Response, error) {
	out := new(DescribeTipV1Response)
	err := c.cc.Invoke(ctx, "/ocp.tip.api.OcpTipApi/DescribeTipV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTipApiClient) ListTipsV1(ctx context.Context, in *ListTipsV1Request, opts ...grpc.CallOption) (*ListTipsV1Response, error) {
	out := new(ListTipsV1Response)
	err := c.cc.Invoke(ctx, "/ocp.tip.api.OcpTipApi/ListTipsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTipApiClient) RemoveTipV1(ctx context.Context, in *RemoveTipV1Request, opts ...grpc.CallOption) (*RemoveTipV1Response, error) {
	out := new(RemoveTipV1Response)
	err := c.cc.Invoke(ctx, "/ocp.tip.api.OcpTipApi/RemoveTipV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTipApiClient) ServiceInfoV1(ctx context.Context, in *ServiceInfoV1Request, opts ...grpc.CallOption) (*ServiceInfoV1Response, error) {
	out := new(ServiceInfoV1Response)
	err := c.cc.Invoke(ctx, "/ocp.tip.api.OcpTipApi/ServiceInfoV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpTipApiServer is the server API for OcpTipApi service.
// All implementations must embed UnimplementedOcpTipApiServer
// for forward compatibility
type OcpTipApiServer interface {
	// Создает новый совет
	CreateTipV1(context.Context, *CreateTipV1Request) (*CreateTipV1Response, error)
	// Создает множество советов
	MultiCreateTipV1(context.Context, *MultiCreateTipV1Request) (*MultiCreateTipV1Response, error)
	// Обновляет совет
	UpdateTipV1(context.Context, *UpdateTipV1Request) (*UpdateTipV1Response, error)
	// Возвращает описание совета
	DescribeTipV1(context.Context, *DescribeTipV1Request) (*DescribeTipV1Response, error)
	// Возвращает список советов
	ListTipsV1(context.Context, *ListTipsV1Request) (*ListTipsV1Response, error)
	// Удаляет совет
	RemoveTipV1(context.Context, *RemoveTipV1Request) (*RemoveTipV1Response, error)
	// Служебная информация о сервисе
	ServiceInfoV1(context.Context, *ServiceInfoV1Request) (*ServiceInfoV1Response, error)
	mustEmbedUnimplementedOcpTipApiServer()
}

// UnimplementedOcpTipApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpTipApiServer struct {
}

func (UnimplementedOcpTipApiServer) CreateTipV1(context.Context, *CreateTipV1Request) (*CreateTipV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTipV1 not implemented")
}
func (UnimplementedOcpTipApiServer) MultiCreateTipV1(context.Context, *MultiCreateTipV1Request) (*MultiCreateTipV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateTipV1 not implemented")
}
func (UnimplementedOcpTipApiServer) UpdateTipV1(context.Context, *UpdateTipV1Request) (*UpdateTipV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTipV1 not implemented")
}
func (UnimplementedOcpTipApiServer) DescribeTipV1(context.Context, *DescribeTipV1Request) (*DescribeTipV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTipV1 not implemented")
}
func (UnimplementedOcpTipApiServer) ListTipsV1(context.Context, *ListTipsV1Request) (*ListTipsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTipsV1 not implemented")
}
func (UnimplementedOcpTipApiServer) RemoveTipV1(context.Context, *RemoveTipV1Request) (*RemoveTipV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTipV1 not implemented")
}
func (UnimplementedOcpTipApiServer) ServiceInfoV1(context.Context, *ServiceInfoV1Request) (*ServiceInfoV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceInfoV1 not implemented")
}
func (UnimplementedOcpTipApiServer) mustEmbedUnimplementedOcpTipApiServer() {}

// UnsafeOcpTipApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpTipApiServer will
// result in compilation errors.
type UnsafeOcpTipApiServer interface {
	mustEmbedUnimplementedOcpTipApiServer()
}

func RegisterOcpTipApiServer(s grpc.ServiceRegistrar, srv OcpTipApiServer) {
	s.RegisterService(&OcpTipApi_ServiceDesc, srv)
}

func _OcpTipApi_CreateTipV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTipV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTipApiServer).CreateTipV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.tip.api.OcpTipApi/CreateTipV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTipApiServer).CreateTipV1(ctx, req.(*CreateTipV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTipApi_MultiCreateTipV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateTipV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTipApiServer).MultiCreateTipV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.tip.api.OcpTipApi/MultiCreateTipV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTipApiServer).MultiCreateTipV1(ctx, req.(*MultiCreateTipV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTipApi_UpdateTipV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTipV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTipApiServer).UpdateTipV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.tip.api.OcpTipApi/UpdateTipV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTipApiServer).UpdateTipV1(ctx, req.(*UpdateTipV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTipApi_DescribeTipV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTipV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTipApiServer).DescribeTipV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.tip.api.OcpTipApi/DescribeTipV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTipApiServer).DescribeTipV1(ctx, req.(*DescribeTipV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTipApi_ListTipsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTipsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTipApiServer).ListTipsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.tip.api.OcpTipApi/ListTipsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTipApiServer).ListTipsV1(ctx, req.(*ListTipsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTipApi_RemoveTipV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTipV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTipApiServer).RemoveTipV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.tip.api.OcpTipApi/RemoveTipV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTipApiServer).RemoveTipV1(ctx, req.(*RemoveTipV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTipApi_ServiceInfoV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfoV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTipApiServer).ServiceInfoV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.tip.api.OcpTipApi/ServiceInfoV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTipApiServer).ServiceInfoV1(ctx, req.(*ServiceInfoV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpTipApi_ServiceDesc is the grpc.ServiceDesc for OcpTipApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpTipApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.tip.api.OcpTipApi",
	HandlerType: (*OcpTipApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTipV1",
			Handler:    _OcpTipApi_CreateTipV1_Handler,
		},
		{
			MethodName: "MultiCreateTipV1",
			Handler:    _OcpTipApi_MultiCreateTipV1_Handler,
		},
		{
			MethodName: "UpdateTipV1",
			Handler:    _OcpTipApi_UpdateTipV1_Handler,
		},
		{
			MethodName: "DescribeTipV1",
			Handler:    _OcpTipApi_DescribeTipV1_Handler,
		},
		{
			MethodName: "ListTipsV1",
			Handler:    _OcpTipApi_ListTipsV1_Handler,
		},
		{
			MethodName: "RemoveTipV1",
			Handler:    _OcpTipApi_RemoveTipV1_Handler,
		},
		{
			MethodName: "ServiceInfoV1",
			Handler:    _OcpTipApi_ServiceInfoV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-tip-api/ocp-tip-api.proto",
}
